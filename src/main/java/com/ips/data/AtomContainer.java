/*
 * Created on May 18, 2004  
 *
 * To change the template for this generated file go to
 * Window>Preferences>Java>Code Generation>Code and Comments
 */
package com.ips.data;

import com.ips.data.util.StringFunc;
import java.util.*;
import java.sql.*;
import java.io.ByteArrayInputStream;

/**
 * @author pasquale
 *
 * To change the template for this generated type comment go to
 * Window>Preferences>Java>Code Generation>Code and Comments
 */
public class AtomContainer {

    private final int version = 21;
    private String TableName;
    protected LinkedHashMap Container;
    protected LinkedHashMap PrimaryKeysContainer;
    protected LinkedHashMap AutoGeneratedKeyContainer;
    private String Catalog = null;
    private String Schema = null;
    private boolean Empty = true;
    private String IdentifierQuoteString;    
    private int queryTimeout = -1;
    

    public int ColumnCount() {
        return Container.size();
    }
    public String escape(String StringParam)
    {
        return  StringFunc.isNull(this.getIdentifierQuoteString(),"") + StringParam + StringFunc.isNull(this.getIdentifierQuoteString(),"");
    }
    public String[] getColumnName() {
        String[] myArray = new String[Container.size()];
        int index = 0;
        Collection c = Container.values();
        for (Iterator i = c.iterator(); i.hasNext();) {
            myArray[index++] = ((AtomProperty) i.next()).getFieldName();
        }
        return myArray;
    }
    
    public LinkedHashMap cloneFields()
    {
        LinkedHashMap CloneContainer = new LinkedHashMap();
        
        Collection c = Container.values();
        for (Iterator i = c.iterator(); i.hasNext();) {
            AtomProperty myAtomProperty = (AtomProperty) i.next();
            AtomProperty CopyAtomProperty =  new AtomProperty(myAtomProperty.getFieldName(), myAtomProperty.getOBJECT_TYPE(), myAtomProperty.takeInsert(), myAtomProperty.takeUpdate());
            CloneContainer.put(CopyAtomProperty.getFieldName(), CopyAtomProperty);
            
        }
        
        
        return CloneContainer;
    }  
    public void setFields(LinkedHashMap LinkedHashMapParam)
    {
        this.Container = LinkedHashMapParam;
    }
    @Override
    public String toString() {
        String ObjectDump = "";
        Collection c = Container.values();
        boolean first = true;
        for (Iterator i = c.iterator(); i.hasNext();) {
            if (first) {
                ObjectDump += ((AtomProperty) i.next()).toString();
                first = false;
            } else {
                ObjectDump += "; " + ((AtomProperty) i.next()).toString();
            }
        }
        return ObjectDump;
    }

    /**
     *
     * @param ColumnName
     * @return check the ColumnName is an autogenerated key
     */
    public boolean isAutoGeneratedKey(String ColumnName) {
        if (AutoGeneratedKeyContainer == null || AutoGeneratedKeyContainer.isEmpty()) {
            return false;
        }
        return this.AutoGeneratedKeyContainer.containsKey(ColumnName);

    }

    public String[] getHumanColumnName() throws Exception {
        String[] myArray = new String[Container.size()];
        try {
            int index = 0;
            Collection c = Container.values();
            for (Iterator i = c.iterator(); i.hasNext();) {
                String DataBaseColumn = ((AtomProperty) i.next()).getFieldName();
                String HumanColumn = this.getHumanFieldName(DataBaseColumn);
                if (HumanColumn == null) {
                    HumanColumn = "";
                }
                myArray[index++] = HumanColumn;

            }
        } catch (Exception e) {
            throw e;
        }
        return myArray;
    }
    public int getPrimaryKeyCount()
    {
        int count = 0;
        if(PrimaryKeysContainer != null)
                count = PrimaryKeysContainer.size();
        return count;
    }
    public void generateHumanColumnName() throws Exception {
        try {
            String[] myArray = new String[Container.size()];
            int index = 0;
            Collection c = Container.values();
            for (Iterator i = c.iterator(); i.hasNext();) {
                String DataBaseColumn = ((AtomProperty) i.next()).getFieldName();
                String HumanColumn = "";
                char[] Temp = DataBaseColumn.toCharArray();
                boolean first = true;
                for (char myChar : Temp) {
                    if (Character.isUpperCase(myChar)) {
                        if (first) {
                            first = false;
                        } else {
                            HumanColumn += " ";
                        }
                    }

                    HumanColumn += myChar;
                }
                myArray[index++] = HumanColumn;
                this.setHumanFieldName(DataBaseColumn, HumanColumn);
            }
        } catch (Exception e) {
            throw e;
        }

    }

    public boolean containsColumnName(String ColumnNameParam) {

        Collection c = Container.values();
        for (Iterator i = c.iterator(); i.hasNext();) {
            if (((AtomProperty) i.next()).getFieldName().equalsIgnoreCase(ColumnNameParam) == true) {
                return true;
            }
        }
        return false;
    }

    public AtomContainer() {
        Container = new LinkedHashMap();
        PrimaryKeysContainer = new LinkedHashMap();
        AutoGeneratedKeyContainer = new LinkedHashMap();
    }

    public void addAutoGeneratedKey(String FieldNameParam) throws Exception {
        if (Container.containsKey(FieldNameParam)) {
            if (AutoGeneratedKeyContainer.containsKey(FieldNameParam) == false) {
                AutoGeneratedKeyContainer.put(FieldNameParam, FieldNameParam);
            }
        } else {
            throw new Exception(FieldNameParam + " key does'nt exists.");
        }


    }

    public void setPrimaryKey(String FieldNameParam) throws Exception {
        if (Container.containsKey(FieldNameParam)) {
            PrimaryKeysContainer.put(FieldNameParam, FieldNameParam);
        } else {
            throw new Exception(FieldNameParam + " key does'nt exists.");
        }
    }

    public void clear() {
        Collection c = Container.values();
        for (Iterator i = c.iterator(); i.hasNext();) {

            ((AtomProperty) i.next()).emptyData();
        }

    }

    public void add(String FieldNameParam, int SQL_TYPE_param, boolean InsertParam, boolean UpdateParam) {
        AtomProperty myAtomProperty = new AtomProperty(FieldNameParam, SQL_TYPE_param, InsertParam, UpdateParam);
        Container.put(FieldNameParam, myAtomProperty);
    }

    public void add(String FieldNameParam, int SQL_TYPE_param, boolean InsertParam, boolean UpdateParam, int MaxLengthParam) {
        AtomProperty myAtomProperty = new AtomProperty(FieldNameParam, SQL_TYPE_param, InsertParam, UpdateParam, MaxLengthParam);
        Container.put(FieldNameParam, myAtomProperty);
    }

    public void set(String FieldNameParam, Object ValueParam) throws Exception {
        if (Container.containsKey(FieldNameParam)) {
            ((AtomProperty) Container.get(FieldNameParam)).set(ValueParam);
        } else {
            throw new Exception(FieldNameParam + " key does'nt exists.");
        }

    }

    public void setAtomObject(String FieldNameParam, AtomProperty AtomPropertyParam) throws Exception {
        if (Container.containsKey(FieldNameParam)) {
            Container.put(FieldNameParam, AtomPropertyParam);
        } else {
            throw new Exception(FieldNameParam + " key does'nt exists.");
        }

    }

    public void setReadOnly(String FieldNameParam, boolean ReadOnlyParam) throws Exception {
        if (Container.containsKey(FieldNameParam)) {
            ((AtomProperty) Container.get(FieldNameParam)).setReadOnly(ReadOnlyParam);
        } else {
            throw new Exception(FieldNameParam + " key does'nt exists.");
        }

    }

    public void setHumanFieldName(String FieldNameParam, String HumanFieldNameParam) throws Exception {
        if (Container.containsKey(FieldNameParam)) {
            ((AtomProperty) Container.get(FieldNameParam)).setHumanFieldName(HumanFieldNameParam);
        } else {
            throw new Exception(FieldNameParam + " key does'nt exists.");
        }

    }

    public boolean containsHumanColumnName(String HumanFieldNameParam) throws Exception {
        boolean found = false;
        try {
            Collection c = Container.values();
            for (Iterator i = c.iterator(); i.hasNext();) {
                String DataBaseColumn = ((AtomProperty) i.next()).getFieldName();
                if (this.getHumanFieldName(DataBaseColumn).equals(HumanFieldNameParam)) {
                    return true;
                }
            }
        } catch (Exception e) {
            throw e;
        }

        return found;

    }

    public String getFieldNameFromHumanFieldName(String HumanFieldNameParam) throws Exception {
        
        try {
            Collection c = Container.values();
            for (Iterator i = c.iterator(); i.hasNext();) {
                String DataBaseColumn = ((AtomProperty) i.next()).getFieldName();
                if (this.getHumanFieldName(DataBaseColumn).equals(HumanFieldNameParam)) {
                    return DataBaseColumn;
                }
            }
        } catch (Exception e) {
            throw e;
        }

        return null;

    }

    public void setIsCustom(String FieldNameParam, boolean ValueParam) throws Exception {
        if (Container.containsKey(FieldNameParam)) {
            ((AtomProperty) Container.get(FieldNameParam)).setIsCustom(ValueParam);
        } else {
            throw new Exception(FieldNameParam + " key does'nt exists.");
        }
    }

    public void setSize(String FieldNameParam, long Size) throws Exception {
        if (Container.containsKey(FieldNameParam)) {
            ((AtomProperty) Container.get(FieldNameParam)).setSize(Size);
        } else {
            throw new Exception(FieldNameParam + " key does'nt exists.");
        }
    }

    public void remove(String FieldNameParam) throws Exception {
        if (Container.containsKey(FieldNameParam)) {
            Container.remove(FieldNameParam);
        } else {
            throw new Exception(FieldNameParam + " key does'nt exists.");
        }
    }

    public java.sql.ResultSet isRecorded(java.sql.Connection conn, int Id)
            throws java.sql.SQLException, Exception {
        try {
            String IsRecordedQuery = "Select * from " + getTableName() + " where " + getPRIMARY_KEY() + "=" + Id;
            Statement myStatement = conn.createStatement();
            java.sql.ResultSet myResultSet = myStatement.executeQuery(IsRecordedQuery);
            return myResultSet;
        } catch (java.sql.SQLException sqlexception) {
            throw sqlexception;
        } catch (Exception e) {
            throw e;
        }


    }

    public void setTableName(String TableNameParam) {
        TableName = TableNameParam;
    }

    public void readRecordFields(java.sql.ResultSet myResult)
            throws java.sql.SQLException {
        try {

            Collection c = Container.values();
            for (Iterator i = c.iterator(); i.hasNext();) {
                AtomProperty myAtomProperty = (AtomProperty) i.next();
                myAtomProperty.readRecord(myResult);
                if (Container.containsKey(myAtomProperty.getFieldName())) {
                    Container.put(myAtomProperty.getFieldName(), myAtomProperty);
                }
            }

        } catch (java.sql.SQLException sqlexception) {
            throw sqlexception;
        }
    }

    public String getString(String FieldNameParam) throws Exception {
        if (Container.containsKey(FieldNameParam)) {
            return ((AtomProperty) Container.get(FieldNameParam)).getString();
        } else {
            throw new Exception(FieldNameParam + " key does'nt exists.");
        }

    }

    public String getHumanFieldName(String FieldNameParam) throws Exception {
        if (Container.containsKey(FieldNameParam)) {
            return ((AtomProperty) Container.get(FieldNameParam)).getHumanFieldName();
        } else {
            throw new Exception(FieldNameParam + " key does'nt exists.");
        }

    }

    public ByteArrayInputStream getByteArrayInputStream(String FieldNameParam) throws Exception {
        if (Container.containsKey(FieldNameParam)) {
            return ((AtomProperty) Container.get(FieldNameParam)).getByteArrayInputStream();
        } else {
            throw new Exception(FieldNameParam + " key does'nt exists.");
        }

    }

    public Float getFloat(String FieldNameParam) throws Exception {
        if (Container.containsKey(FieldNameParam)) {
            return ((AtomProperty) Container.get(FieldNameParam)).getFloat();
        } else {
            throw new Exception(FieldNameParam + " key does'nt exists.");
        }
    }

    public boolean getIsCustom(String FieldNameParam) throws Exception {

        if (Container.containsKey(FieldNameParam)) {
            return ((AtomProperty) Container.get(FieldNameParam)).getIsCustom();
        } else {
            throw new Exception(FieldNameParam + " key does'nt exists.");
        }
    }

    public boolean IsReadOnly(String FieldNameParam) throws Exception {
        if (Container.containsKey(FieldNameParam)) {
            return ((AtomProperty) Container.get(FieldNameParam)).isReadOnly();
        } else {
            throw new Exception(FieldNameParam + " key does'nt exists.");
        }
    }

    public Long getLong(String FieldNameParam) throws Exception {
        if (Container.containsKey(FieldNameParam)) {
            return ((AtomProperty) Container.get(FieldNameParam)).getLong();
        } else {
            throw new Exception(FieldNameParam + " key does'nt exists.");
        }
    }

    public Double getDouble(String FieldNameParam) throws Exception {
        if (Container.containsKey(FieldNameParam)) {
            AtomProperty myProperty = (AtomProperty) Container.get(FieldNameParam);
            return ((AtomProperty) Container.get(FieldNameParam)).getDouble();
        } else {
            throw new Exception(FieldNameParam + " key does'nt exists.");
        }
    }

    public boolean getBoolean(String FieldNameParam) throws Exception {
        if (Container.containsKey(FieldNameParam)) {
            return ((AtomProperty) Container.get(FieldNameParam)).getBoolean();
        } else {
            throw new Exception(FieldNameParam + " key does'nt exists.");
        }
    }

    public Integer getInteger(String FieldNameParam) throws Exception {
        if (Container.containsKey(FieldNameParam)) {
            return ((AtomProperty) Container.get(FieldNameParam)).getInteger();
        } else {
            throw new Exception(FieldNameParam + " key does'nt exists.");
        }
    }

    public long getSize(String FieldNameParam) throws Exception {
        if (Container.containsKey(FieldNameParam)) {
            return ((AtomProperty) Container.get(FieldNameParam)).getSize();
        } else {
            throw new Exception(FieldNameParam + " key does'nt exists.");
        }
    }

    public int getOBJECT_TYPE(String FieldNameParam) throws Exception {
        if (Container.containsKey(FieldNameParam)) {
            return ((AtomProperty) Container.get(FieldNameParam)).getOBJECT_TYPE();
        } else {
            throw new Exception(FieldNameParam + " key does'nt exists.");
        }
    }

    public Calendar getCalendar(String FieldNameParam) throws Exception {
        if (Container.containsKey(FieldNameParam)) {
            return ((AtomProperty) Container.get(FieldNameParam)).getCalendar();
        } else {
            throw new Exception(FieldNameParam + " key does'nt exists.");
        }
    }

    public Timestamp getTimestamp(String FieldNameParam) throws Exception {
        if (Container.containsKey(FieldNameParam)) {
            return ((AtomProperty) Container.get(FieldNameParam)).getTimestamp();
        } else {
            throw new Exception(FieldNameParam + " key does'nt exists.");
        }
    }

    public AtomProperty getFieldObject(String FieldNameParam) throws Exception {
        if (Container.containsKey(FieldNameParam)) {
            return ((AtomProperty) Container.get(FieldNameParam));
        } else {
            throw new Exception(FieldNameParam + " key does'nt exists.");
        }
    }

    public AtomProperty getAtomObject(String FieldNameParam) throws Exception {
        if (Container.containsKey(FieldNameParam)) {
            return ((AtomProperty) Container.get(FieldNameParam));
        } else {
            throw new Exception(FieldNameParam + " key does'nt exists.");
        }
    }

    /**
     * @return the first PRIMARY_KEY (backward compatibility)
     */
    public String getPRIMARY_KEY() {
        String PRIMARY_KEY = null;
        Collection c = PrimaryKeysContainer.values();
        Iterator i = c.iterator();
        if (i.hasNext()) {
            PRIMARY_KEY = (String) i.next();
        }
        return PRIMARY_KEY;
    }

    /**
     * @return the SECOND_PRIMARY_KEY (backward compatibility)
     */
    public String getSECONDARY_KEY() {
        String SECONDARY_KEY = null;
        Collection c = PrimaryKeysContainer.values();
        Iterator i = c.iterator();
        if (i.hasNext()) {
            /** get the second primary key */
            if (i.next() != null) {
                SECONDARY_KEY = (String) i.next();
            }

        }
        return SECONDARY_KEY;
    }

    public void addPrimaryKey(String FieldNameParam) throws Exception {
        if (Container.containsKey(FieldNameParam)) {
            if (PrimaryKeysContainer.containsKey(FieldNameParam) == false) {
                PrimaryKeysContainer.put(FieldNameParam, FieldNameParam);
            }

        } else {
            throw new Exception(FieldNameParam + " key does'nt exists.");
        }
    }

    public void RemovePrimaryKey(String FieldNameParam) throws Exception {
        if (Container.containsKey(FieldNameParam)) {
            if (PrimaryKeysContainer.containsKey(FieldNameParam)) {
                PrimaryKeysContainer.remove(FieldNameParam);
            }

        } else {
            throw new Exception(FieldNameParam + " key does'nt exists.");
        }
    }
    public void RemoveAllPrimaryKeys() throws Exception {
        
           PrimaryKeysContainer.clear();         
    }

    /**
     * @return the TableName
     */
    public String getTableName() {
        return TableName;
    }

    public int getPRIMARY_KEY_TYPE() {
        if (PrimaryKeysContainer.containsKey(this.getPRIMARY_KEY())) {
            AtomProperty myAtomProperty = (AtomProperty) (Container.get(this.getPRIMARY_KEY()));
            return myAtomProperty.getOBJECT_TYPE();
        }
        return 0;
    }

    public void setPRIMARY_KEY_TYPE(int SQL_TYPE_param) {

        if (PrimaryKeysContainer.containsKey(this.getPRIMARY_KEY())) {
            AtomProperty myAtomProperty = (AtomProperty) (Container.get(this.getPRIMARY_KEY()));
            myAtomProperty.setOBJECT_TYPE(SQL_TYPE_param);
            Container.put(this.getPRIMARY_KEY(), myAtomProperty);
        }
    }

    /**
     * @return the Empty
     */
    public boolean isEmpty() {
        return Empty;
    }

    /**
     * @param Empty the Empty to set
     */
    public void setEmpty(boolean Empty) {
        this.Empty = Empty;
    }

    /**
     * @return the Catalog
     */
    public String getCatalog() {
        return Catalog;
    }

    /**
     * @param Catalog the Catalog to set
     */
    public void setCatalog(String Catalog) {
        this.Catalog = Catalog;
    }

    /**
     * @return the IdentifierQuoteString
     */
    public String getIdentifierQuoteString() {
        return IdentifierQuoteString;
    }

    /**
     * @param IdentifierQuoteString the IdentifierQuoteString to set
     */
    public void setIdentifierQuoteString(String IdentifierQuoteString) {
        this.IdentifierQuoteString = IdentifierQuoteString;
    }
    public String getCatalogSeparator(DatabaseMetaData dmd) throws SQLException            
    {
        String CatalogSeparator = ".";
        try
        { 
            CatalogSeparator = dmd.getCatalogSeparator();          
            if (CatalogSeparator == null || CatalogSeparator.length() == 0) {
                CatalogSeparator = ".";
            }    
        }
        catch(SQLException sqle)
        {    
            throw  sqle;
        }   
        return CatalogSeparator;
    }    
    /**
     * @return the Schema
     */
    public String getSchema() {
        return Schema;
    }

    /**
     * @param Schema the Schema to set
     */
    public void setSchema(String Schema) {
        this.Schema = Schema;
    }

  /**
   * @return the queryTimeout
   */
  public int getQueryTimeout() {
    return queryTimeout;
  }

  /**
   * @param queryTimeout the queryTimeout to set
   */
  public void setQueryTimeout(int queryTimeout) {
    this.queryTimeout = queryTimeout;
  }
  
}
